# codemagic.yaml
# Versão FINAL E CORRIGIDA do fluxo de trabalho.
# Resolve os erros "command not found" inicializando as ferramentas e usando caminhos absolutos.

workflows:
  android-debug-build:
    name: EchoTap - Android Debug Build
    instance_type: mac_mini_m1
      
    environment:
      groups:
        # Garante que a variável de ambiente $ANDROID_HOME esteja definida.
        - android-sdk

    scripts:
      - name: Configurar ambiente de build (Java e Android SDK)
        script: | 
          set -e # Faz o script falhar imediatamente se um comando falhar.
          
          echo "1. Inicializando jenv..."
          # PASSO 1 DA CORREÇÃO: Inicializa o jenv para a sessão de shell atual.
          export PATH="$HOME/.jenv/bin:$PATH"
          eval "$(jenv init -)"
          
          echo "2. Definindo a versão do Java para 11..."
          # Agora o comando 'jenv' será encontrado.
          jenv global 11.0
          
          echo "3. Aceitando as licenças do SDK do Android..."
          # PASSO 2 DA CORREÇÃO: Usa o caminho absoluto para o sdkmanager.
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses >/dev/null
          
          echo "4. Instalando as Ferramentas de Build v33.0.2..."
          # PASSO 2 DA CORREÇÃO (continuação): Usa o caminho absoluto novamente.
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "build-tools;33.0.2"

      - name: Instalar dependências e CLI do Cordova
        script: | 
          # Boa prática: definir e usar uma versão específica do Node.js
          nvm install 20
          nvm use 20
          npm install -g cordova
          npm install

      - name: Construir o APK de teste (Debug)
        script: | 
          cordova build android --debug
          
    artifacts:
      # O caminho para o artefato está correto.
      - platforms/android/app/build/outputs/apk/debug/app-debug.apk